import express from 'express'
import * as dotenv from 'dotenv'
import cors from 'cors'
import { Configuration, OpenAIApi } from 'openai'



dotenv.config()

const configuration = new Configuration({
    apiKey: process.env.GPT_API_KEY,
});

const openai = new OpenAIApi(configuration);
const app = express()
app.use(cors())


export async function gptPlaceInfo(placeName: string, length: number): Promise<string | undefined> {

    let response;
    try {
        response = await openai.createCompletion({
            model: "text-davinci-003",
            prompt: `Tell me about ${placeName} in ${length} words or fewer.`,
            temperature: 0.2,
            max_tokens: length * 2,
            top_p: 1,
            frequency_penalty: 0,
            presence_penalty: 0,
        });
        //
        if (response.data.choices[0].text === "") {
            console.log("No answer found");
            return undefined;
        }
        // logprobs - the log probability of each token generated by the API,
        // to calculate the confidence of the response.
        let logprobs = response.data.choices[0].logprobs;
        if (logprobs) {
            //let confidence = logprobs ? (1 - Math.min(...Object.values(logprobs))) : 0
            // get the avg
            let confidence = logprobs ? (1 - (Object.values(logprobs).reduce((a, b) => a + b) / Object.values(logprobs).length)) : 0;
            if (confidence < 0.7) {
                console.log("Answer is uncertain");
                return response.data.choices[0].text + " (uncertain)";
            }
        }
        //
        return response.data.choices[0].text;
    } catch (error) {
        return undefined;
    }
};

export async function gptEventInfo(placeName: string, length: number): Promise<string | undefined> {

    let response;
    try {
        response = await openai.createCompletion({
            model: "text-davinci-003",
            prompt: `What is ${placeName} event? please tell me about it in ${length} words or fewer.`,
            temperature: 0.2,
            max_tokens: length * 2,
            top_p: 1,
            frequency_penalty: 0,
            presence_penalty: 0,
        });
        //
        if (response.data.choices[0].text === "") {
            console.log("No answer found");
            return undefined;
        }
        // logprobs - the log probability of each token generated by the API,
        // to calculate the confidence of the response.
        let logprobs = response.data.choices[0].logprobs;
        if (logprobs) {
            //let confidence = logprobs ? (1 - Math.min(...Object.values(logprobs))) : 0
            // get the avg
            let confidence = logprobs ? (1 - (Object.values(logprobs).reduce((a, b) => a + b) / Object.values(logprobs).length)) : 0;
            if (confidence < 0.7) {
                console.log("Answer is uncertain");
                return response.data.choices[0].text + " (uncertain)";
            }
        }
        //
        return response.data.choices[0].text;
    } catch (error) {
        console.log(error)
        return undefined;
    }
};


export async function formatToLength(description: string, length: number): Promise<string | undefined> {
    let response;
    try {
        response = await openai.createCompletion({
            model: "text-davinci-003",
            prompt: `Rewrite the following description to be no longer than ${length} characters:\n${description}`,
            temperature: 0.2,
            max_tokens: length * 2,
            top_p: 1,
            frequency_penalty: 0,
            presence_penalty: 0,
        });
        return response.data.choices[0].text;
    } catch (error) {
        return undefined;
    }
};